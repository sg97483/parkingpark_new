// 이 파일의 내용을 그대로 복사해서 사용하세요.

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android" // 최신 라이브러리 호환성을 위해 유지합니다.
apply plugin: "com.facebook.react"
// vector-icons 폰트 설정을 기존 파일에서 가져옵니다.
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    // 이 부분은 기본 설정을 그대로 사용합니다.
}

/**
 * 릴리즈 빌드 시 Proguard(코드 축소/난독화)를 활성화합니다.
 * 기존 설정을 따라 'true'로 유지합니다.
 */
def enableProguardInReleaseBuilds = true

/**
 * JavaScriptCore (JSC)의 빌드 버전을 설정합니다.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {

      // 🚩 [추가] 이전 버전의 파일 이름 자동 생성 로직
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def formattedDate = new Date().format('dd_MM')
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def nameFile = output.outputFile.name
            def extension = nameFile.substring(nameFile.lastIndexOf("."));
            def name = "NB_MB_ParkingPark " +  formattedDate + " " + versionName +  "(" + versionCode + ")"
            nameFile = nameFile.replace("app-release", name)
            output.outputFileName  = nameFile
        }
    }
    // NDK, 빌드 도구, 컴파일 SDK 버전은 새 파일의 방식을 따릅니다.
    // 이 값들은 루트의 build.gradle에서 관리됩니다.
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    // namespace와 applicationId는 기존 설정을 그대로 가져옵니다. (가장 중요)
    namespace "kr.wisemobile.parking"
    defaultConfig {
        applicationId "kr.wisemobile.parking"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        // 버전 정보도 기존 설정을 그대로 가져옵니다.
        versionCode 465
        versionName "3.4.4"
    }

    // 서명 설정은 기존 설정을 그대로 가져옵니다.
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    // 빌드 타입 설정도 기존 설정을 반영하여 수정합니다.
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            crunchPngs false  // 🚩 [추가] PNG 압축 비활성화
            signingConfig signingConfigs.release // 릴리즈 서명을 사용하도록 수정
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // 🚩 [추가] 이전 버전의 ABI 분리 로직
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }

      // 🚩 [추가] 이전 버전의 라이브러리 충돌 방지 로직
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libjsc.so'
        pickFirst 'lib/arm64-v8a/libjsc.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }

}

dependencies {
    // 새 파일의 기본 리액트 네이티브 의존성을 유지합니다.
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // 기존 파일에 있던 커스텀 의존성들을 모두 추가합니다.
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation project(':react-native-bootsplash')
    implementation "com.kakao.sdk:v2-navi:2.13.0"
    implementation 'com.tnkfactory:pub:7.21.7'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation "androidx.core:core-splashscreen:1.0.0"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.facebook.fresco:fresco:3.1.3'
    implementation 'com.facebook.fresco:drawee:3.1.3'
    implementation 'com.facebook.fresco:imagepipeline:3.1.3'
    implementation project(':react-native-mail')
    implementation project(':react-native-sms')
    implementation project(':react-native-webview')
    implementation "com.google.android.gms:play-services-ads-identifier:18.0.1"
    implementation project(':react-native-video')

}

apply plugin: 'com.google.gms.google-services'
// 네이티브 모듈 설정을 불러오는 부분은 새 파일의 방식(맨 아래 위치)을 따릅니다.
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// 🚩 [추가] vector-icons 폰트 설정
project.ext.vectoricons = [
    iconFontNames: [ 'MaterialCommunityIcons.ttf' ]
]
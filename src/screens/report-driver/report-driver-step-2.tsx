import React, {useMemo, useRef, useState} from 'react';
import {StyleSheet, View} from 'react-native';
import {showMessage} from 'react-native-flash-message';
import {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';
import CustomButton from '~components/commons/custom-button';
import CustomCheckbox from '~components/commons/custom-checkbox';
import CustomTextArea from '~components/commons/custom-text-area';
import ImageSelector from '~components/commons/image-selector';
import PageButton from '~components/commons/page-button';
import SelectBox from '~components/commons/select-box';
import CustomHeader from '~components/custom-header';
import CustomText from '~components/custom-text';
import FixedContainer from '~components/fixed-container';
import SelectReportTypeModal, {
  SelectReportTypeModalRefs,
} from '~components/select-report-type-modal';
import {IS_IOS, PADDING1} from '~constants/constant';
import {FONT_FAMILY, REPORT_TYPE} from '~constants/enum';
import {ImageProps} from '~constants/types';
import {ROUTE_KEY} from '~navigators/router';
import {RootStackScreenProps} from '~navigators/stack';
import {useBlockUserMutation, useReportUserMutation} from '~services/carpoolServices';
import {colors} from '~styles/colors';
import {heightScale1, scale1, widthScale1} from '~styles/scaling-utils';
import {fontSize1} from '~styles/typography';
import {REPORT_DRIVER_DATA} from './report-driver-step-1';
import {userHook} from '~hooks/userHook';
import HStack from '~components/h-stack';

const ReportDriverStep2 = (props: RootStackScreenProps<'ReportDriverStep2'>) => {
  const {navigation, route} = props;
  const {reportType, routeID, driverID} = route?.params;
  const selectTypeRef = useRef<SelectReportTypeModalRefs>(null);
  const {myDriverInfo, userToken} = userHook();

  const paymentAccountNumber = useMemo(() => myDriverInfo?.bankNum, [myDriverInfo?.bankNum]);
  const paymentBankName = useMemo(() => myDriverInfo?.bankName, [myDriverInfo?.bankName]);
  const paymentOwnerName = useMemo(() => myDriverInfo?.pName, [myDriverInfo?.pName]);
  const isRegisterdCard = useMemo(
    () => paymentAccountNumber !== '' && paymentBankName !== '' && paymentOwnerName !== '',
    [paymentAccountNumber, paymentBankName, paymentOwnerName],
  );

  const [createReportDriver, {isLoading}] = useReportUserMutation();
  const [blockDriver] = useBlockUserMutation();

  const [selectedType, setSelectedType] = useState<REPORT_TYPE>(
    reportType || REPORT_TYPE.NOT_APPEAR_AT_CARPOOL,
  );
  const [reportDetail, setReportDetail] = useState<string>('');
  const [image, setImage] = useState<ImageProps | null>();
  const [isBlockUser, setIsBlockUser] = useState<boolean>(false);

  const cancellationReason = useMemo((): string => {
    switch (selectedType) {
      case REPORT_TYPE.NOT_APPEAR_AT_CARPOOL:
        return 'ÎìúÎùºÏù¥Î≤ÑÎãòÏù¥ Ïπ¥ÌíÄ ÏïΩÏÜç Ïû•ÏÜåÏóê ÎÇòÌÉÄÎÇòÏßÄ ÏïäÏúºÏÖ®ÎÇòÏöî?\n\nÏπ¥ÌíÄ ÏÑúÎπÑÏä§ ÎãπÏùº ÎìúÎùºÏù¥Î≤Ñ Í∑ÄÏ±Ö ÏÇ¨Ïú†Î°ú Ïù∏Ìï¥ÏÑú Ïö¥ÌñâÏù¥ Ï∑®ÏÜåÍ∞Ä Îêú Í≤ΩÏö∞ ÌÉëÏäπÍ∞ùÏùò Í≤∞Ï†úÍ∏àÏï°ÏùÄ ÏûêÎèôÏúºÎ°ú ÌôòÎ∂à Ï≤òÎ¶¨ÎêòÎ©∞, Ïö¥ÌñâÏù¥ Ï∑®ÏÜåÍ∞Ä ÎêòÏñ¥ ÏÜêÌï¥Î•º Î≥¥Ïã† Î∂ÄÎ∂ÑÏóê ÎåÄÌï¥ Ïã§ÏÜê Î≥¥ÏÉÅ Ï∞®ÏõêÏóêÏÑú Í≤∞Ï†úÌïòÏã† Í∏àÏï°Ïùò 2Î∞∞Î•º ÎìúÎùºÏù¥Î≤ÑÎ•º ÌÜµÌï¥ ÌÉëÏäπÍ∞ùÏóêÍ≤å ÏßÄÍ∏âÎê†Ïàò ÏûàÎèÑÎ°ù Ï≤òÎ¶¨Ìï©ÎãàÎã§.\n\nÌï¥Îãπ ÎÖ∏ÏáºÎ°ú Ïù∏Ìïú Ïã†Í≥†ÌïòÍ∏∞Îäî Ïö¥Ìñâ ÎãπÏùºÎ°ú Î∂ÄÌÑ∞ 7ÏùºÏù¥ÎÇ¥Î°úÎßå Ï†ëÏàò Í∞ÄÎä•Ìï©ÎãàÎã§. Ìï¥Îãπ Î≥¥ÏÉÅ ÏßÄÍ∏âÏùò Í≤ΩÏö∞ Ïã†Í≥† Ï†ëÏàòÌõÑ ÌèâÏùº ÏòÅÏóÖÏùº Í∏∞Ï§Ä 10Ïùº Ïù¥ÎÇ¥Î°ú Ï≤òÎ¶¨Îê©ÎãàÎã§.';
      case REPORT_TYPE.CARPOOL_VEHICLE_IS_DIFFERENT:
        return 'ÎìúÎùºÏù¥Î≤ÑÏùò Ï∞®ÎüâÏù¥ Îì±Î°ùÎêú Ï†ïÎ≥¥ÏôÄ Îã§Î•∏Í∞ÄÏöî?\n\nÏÑúÎπÑÏä§ÎÇ¥ ÏäπÏù∏Îêú Ï∞®ÎüâÍ≥º Îã§Î•∏ Ï∞®ÎüâÏúºÎ°ú Ïπ¥ÌíÄÏùÑ Ïö¥ÌñâÌï†Í≤ΩÏö∞ ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÏ†úÎ•º Î∞õÏùÑÏàò ÏûàÏäµÎãàÎã§.\n\nÌååÌÇπÎ∞ïÍ≥†Í∞ùÏÑºÌÑ∞ÏóêÏÑú ÌôïÏù∏ÌõÑ Ïã†Í≥†ÌïòÍ∏∞Í∞Ä Ï†ëÏàòÎêòÎ©¥ Ìï¥ÎãπÎìúÎùºÏù¥Î≤ÑÏóêÍ≤åÎäî 1ÌöåÏùò Í≤ΩÍ≥† Ï°∞ÏπòÍ∞Ä ÏßÑÌñâÎêòÎ©∞ 3Ìöå Ïù¥ÏÉÅ ÎàÑÏ†ÅÏãú ÌÉúÏõåÏ§ò ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê©ÎãàÎã§.';
      case REPORT_TYPE.UNPLEASANT_CONVERSATION:
        return 'Ïñ¥Îñ§ ÏÉÅÌô©ÏóêÏÑúÎì† Ïπ¥ÌíÄÏö¥ÌñâÏ§ë ÎπÑÌïò/Ï°∞Î°±/Î™®Ïöï/Î∞òÎßê Îì± ÏÉÅÎåÄÎ∞©ÏùÑ Î∂àÏæåÌïòÍ≤å ÎßåÎìúÎäî Ïñ∏ÌñâÏùÑ ÌïòÎ©¥ ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÏ†úÎ•º Î∞õÏùÑÏàò ÏûàÏäµÎãàÎã§.\n\nÌååÌÇπÎ∞ïÍ≥†Í∞ùÏÑºÌÑ∞ÏóêÏÑú ÌôïÏù∏ÌõÑ Ïã†Í≥†ÌïòÍ∏∞Í∞Ä Ï†ëÏàòÎêòÎ©¥ Ìï¥ÎãπÎìúÎùºÏù¥Î≤ÑÏóêÍ≤åÎäî 1ÌöåÏùò Í≤ΩÍ≥† Ï°∞ÏπòÍ∞Ä ÏßÑÌñâÎêòÎ©∞ 3Ìöå Ïù¥ÏÉÅ ÎàÑÏ†ÅÏãú ÌÉúÏõåÏ§ò ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê©ÎãàÎã§.';
      case REPORT_TYPE.ADDITIONAL_PAYMENT_REQUEST:
        return 'Ïπ¥ÌíÄ Ïö¥ÌñâÏóê ÎåÄÌï¥ ÌÉúÏõåÏ§ò Ï±ÑÌåÖ Î∞ñÏóêÏÑú Í±∞ÎûòÎ•º ÏöîÍµ¨ÌïòÎäî Í≤ΩÏö∞ ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÏ†úÎ•º Î∞õÏùÑÏàò ÏûàÏäµÎãàÎã§.\n\nÌååÌÇπÎ∞ï Í≥†Í∞ùÏÑºÌÑ∞Î°ú Ïã†Í≥†Ìï¥Ï£ºÏãúÎ©¥ ÏÑúÎπÑÏä§ÎÇ¥ÏóêÏÑú Ìï†Ïàò ÏûàÎäî Î™®Îì† Ï°∞ÏπòÎ•º Ï∑®Ìï¥ ÏµúÎåÄÌïú ÎèÑÏõÄÏùÑ ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.\n\nÌååÌÇπÎ∞ïÍ≥†Í∞ùÏÑºÌÑ∞ÏóêÏÑú ÌôïÏù∏ÌõÑ Ïã†Í≥†ÌïòÍ∏∞Í∞Ä Ï†ëÏàòÎêòÎ©¥ Ìï¥ÎãπÎìúÎùºÏù¥Î≤ÑÏóêÍ≤åÎäî 1ÌöåÏùò Í≤ΩÍ≥† Ï°∞ÏπòÍ∞Ä ÏßÑÌñâÎêòÎ©∞ 3Ìöå Ïù¥ÏÉÅ ÎàÑÏ†ÅÏãú ÌÉúÏõåÏ§ò ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê©ÎãàÎã§.';
      case REPORT_TYPE.ACCIDENT_OCCURRED:
        return 'Ïπ¥ÌíÄ Ïö¥ÌñâÏ§ë Ï∞®ÎüâÏÇ¨Í≥† Î∞è Ï†ëÏ¥âÏÇ¨Í≥†Í∞Ä Î∞úÏÉùÌïòÏÖ®ÎÇòÏöî?\n\nÏ∞®ÎüâÏÇ¨Í≥† Î∞úÏÉùÏóê ÎåÄÌïú Ïã†Í≥†Ï†ëÏàòÎäî Ïã§ÏßàÏ†ÅÏù∏ Ï∞®ÎüâÏÇ¨Í≥† Ï†ëÏàòÎ•º ÏßÑÌñâÌïòÎäîÍ≤å ÏïÑÎãå ÏÇ¨Ïã§ ÌôïÏù∏ÏùÑ ÏúÑÌïú Ïö©ÎèÑÎ°úÎßå Ïì∞Ïó¨ÏßêÏùÑ ÏïàÎÇ¥ÎìúÎ¶ΩÎãàÎã§.\n\nÏã†Í≥† Ï†ëÏàòÌï¥Ï£ºÏãúÎ©¥ ÏÑúÎπÑÏä§ÎÇ¥ÏóêÏÑú Ìï†Ïàò ÏûàÎäî Î™®Îì† Ï°∞ÏπòÎ•º Ï∑®Ìï¥ ÏµúÎåÄÌïú ÎèÑÏõÄÏùÑ ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§. Ïã§Ï†ú ÏÇ¨Í≥† Î≥¥Ìóò Ï†ëÏàòÎäî Ï∞®ÎüâÏóê Í∞ÄÏûÖÎêú Î≥¥ÌóòÏÇ¨Î°ú Ï†ëÏàòÌïòÏÖîÏïºÌï©ÎãàÎã§.';
      case REPORT_TYPE.OTHER:
        return 'ÏïûÏùò Ïã†Í≥† Ìï≠Î™©ÏóêÏÑú Ï†ÅÎãπÌïú ÏÇ¨Ïú†Î•º Ï∞æÏßÄ Î™ªÌïòÏÖîÎÇòÏöî?.\n\nÏïÑÎûòÏóê Ïã†Í≥†ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.\nÌååÌÇπÎ∞ïÏóêÏÑú ÌôïÏù∏ÌõÑ Ïã†Í≥†Ìï¥Ï£ºÏã† ÎÇ¥Ïö©ÏùÑ Î∞îÌÉïÏúºÎ°ú\nÏã†Í≥†Ï≤òÎ¶¨Í∞Ä ÏßÑÌñâÎê©ÎãàÎã§.\nÏ∂îÌõÑ Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Í≤ÄÌÜ†ÌïòÏó¨ Ïã¨Í≥†Ìï≠Î™© Í∞úÏÑ†Ïóê ÌôúÏöîÎê©ÎãàÎã§.';
      default:
        return '';
    }
  }, [selectedType]);

  const handleSubmit = async () => {
    const body = {
      gubun: 'REPORT_DRIVER',
      rdId: routeID as number,
      subject: REPORT_DRIVER_DATA.find(item => item?.value === selectedType)?.title,
      text: reportDetail.trim(),
      photo: image,
      memberId: userToken?.id as number,
      memberPwd: userToken?.password as string,
      bankName: paymentBankName as string,
      bankNum: paymentAccountNumber as string,
      pName: paymentOwnerName as string,
    };

    if (isBlockUser) {
      await blockDriver({
        blockMId: driverID,
        memberId: userToken?.id as number,
      });
    }

    createReportDriver(body as any)
      .unwrap()
      .then(res => {
        console.log('üöÄ ~ handleSubmit ~ res:', res);

        if (res !== '200') {
          showMessage({
            message: 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.',
          });
          return;
        } else {
          showMessage({
            message: 'ÎìúÎùºÏù¥Î≤Ñ Ïã†Í≥†Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.',
          });
          navigation.navigate(ROUTE_KEY.ParkingParkHome, {
            selectedTab: 1,
          });
        }
      });
  };

  return (
    <FixedContainer>
      <CustomHeader text="Ïã†Í≥†ÌïòÍ∏∞" />

      <KeyboardAwareScrollView
        showsVerticalScrollIndicator={false}
        extraScrollHeight={110}
        contentContainerStyle={styles.containerStyle}>
        <SelectBox
          title="ÏÉÅÏÑ∏Ïã†Í≥†ÎÇ¥Ïó≠"
          value={REPORT_DRIVER_DATA.find(item => item?.value === selectedType)?.title}
          placeholderText=""
          onPress={() => selectTypeRef?.current?.show(selectedType)}
        />

        {/* Cancellation reason */}
        <View style={styles.cancellationReasonWrapper}>
          <CustomText
            forDriveMe
            lineHeight={heightScale1(20)}
            color={colors.grayText2}
            string={cancellationReason}
          />
        </View>

        {selectedType === REPORT_TYPE.NOT_APPEAR_AT_CARPOOL ? (
          <View style={styles.insuranceButtonStyle}>
            {isRegisterdCard && (
              <View
                style={{
                  marginBottom: heightScale1(10),
                  gap: heightScale1(10),
                }}>
                <CustomText
                  forDriveMe
                  family={FONT_FAMILY.MEDIUM}
                  color={colors.black}
                  string="Í≥ÑÏ¢åÏ†ïÎ≥¥Îì±Î°ù"
                />
                <HStack>
                  <CustomText
                    forDriveMe
                    family={FONT_FAMILY.MEDIUM}
                    color={colors.grayText}
                    textStyle={{
                      minWidth: widthScale1(69),
                    }}
                    string="Í≥ÑÏ¢åÎ≤àÌò∏ "
                  />
                  <CustomText
                    color={colors.black}
                    forDriveMe
                    string={`${paymentBankName} ${paymentAccountNumber}`}
                  />
                </HStack>
                <HStack>
                  <CustomText
                    forDriveMe
                    family={FONT_FAMILY.MEDIUM}
                    color={colors.grayText}
                    textStyle={{
                      minWidth: widthScale1(69),
                    }}
                    string="ÏòàÍ∏àÏ£º "
                  />
                  <CustomText color={colors.black} forDriveMe string={paymentOwnerName ?? ''} />
                </HStack>
              </View>
            )}
            <PageButton
              text={
                isRegisterdCard
                  ? 'Ï†ïÏÇ∞ Í≥ÑÏ¢å Ï†ïÎ≥¥ Î≥ÄÍ≤Ω'
                  : 'Ïã§ÏÜê Î≥¥ÏÉÅ Î∞õÏúºÏã§ Í≥ÑÏ¢åÏ†ïÎ≥¥Î•º Îì±Î°ùÌï¥Ï£ºÏÑ∏Ïöî.'
              }
              onPress={() => {
                navigation.navigate(ROUTE_KEY.PaymentRegistration);
              }}
            />
          </View>
        ) : null}

        {/* Report detail */}
        <CustomTextArea
          title="ÏÉÅÏÑ∏Ïã†Í≥†ÎÇ¥Ïö©"
          value={reportDetail}
          onChangeText={setReportDetail}
          placeholder="ÏÉÅÏÑ∏Ìïú Ïã†Í≥† ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
        />

        {/* Image */}
        <View style={{marginBottom: PADDING1}}>
          <CustomText
            string="ÏÇ¨ÏßÑÏ≤®Î∂Ä"
            forDriveMe
            family={FONT_FAMILY.MEDIUM}
            lineHeight={heightScale1(20)}
            color={colors.black}
          />
          <CustomText
            string="ÏÇ¨ÏßÑÏ≤®Î∂ÄÍ∞Ä ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏÇ¨ÏßÑÏùÑ Ìï®Íªò Ï≤®Î∂Ä Ìï¥Ï£ºÏÑ∏Ïöî."
            forDriveMe
            color={colors.lineCancel}
            family={FONT_FAMILY.MEDIUM}
            textStyle={{
              marginBottom: heightScale1(10),
              marginTop: heightScale1(4),
            }}
            lineHeight={heightScale1(20)}
          />

          <ImageSelector
            imageURI={image as ImageProps}
            mode="ADD"
            onImage={setImage}
            onRemovePress={() => {
              setImage(null);
            }}
          />
        </View>

        {/* Block user */}
        {selectedType === REPORT_TYPE.UNPLEASANT_CONVERSATION ||
        selectedType === REPORT_TYPE.ADDITIONAL_PAYMENT_REQUEST ? (
          <CustomText
            string="Ìï¥Îãπ ÎÇ¥Ïö©ÏúºÎ°ú Ïã†Í≥†ÌïòÎ©¥ ÏÑúÎ°úÏùò Í≥ÑÏ†ïÏù¥ Ï∞®Îã®ÎêòÎ©∞ ÎçîÏù¥ÏÉÅ ÏÉÅÎåÄÎ∞©Í≥º Ïπ¥ÌíÄÏùÑ ÏßÑÌñâÌï†Ïàò ÏóÜÏäµÎãàÎã§."
            color={colors.grayText}
            forDriveMe
            lineHeight={heightScale1(20)}
          />
        ) : (
          <CustomCheckbox
            isChecked={isBlockUser}
            onPress={() => setIsBlockUser(!isBlockUser)}
            text="Ïù¥ ÎìúÎùºÏù¥Î≤Ñ Ï∞®Îã®ÌïòÍ∏∞"
          />
        )}

        <CustomText
          textStyle={{
            marginVertical: heightScale1(20),
          }}
          color={colors.grayText}
          string="(‚ÄòÎÇ¥Ï†ïÎ≥¥ > ÌôòÍ≤ΩÏÑ§Ï†ï > Ï∞®Îã® ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨‚ÄôÏóêÏÑú Ï∞®Îã®ÏùÑ Ï∑®ÏÜå Ìï†Ïàò ÏûàÏäµÎãàÎã§.)"
          forDriveMe
          lineHeight={heightScale1(20)}
        />
      </KeyboardAwareScrollView>

      <CustomButton
        buttonStyle={styles.submitButtonWrapperStyle}
        text="Ïã†Í≥†ÌïòÍ∏∞"
        buttonHeight={59}
        onPress={handleSubmit}
        disabled={
          !cancellationReason ||
          reportDetail.trim()?.length === 0 ||
          (selectedType === REPORT_TYPE.NOT_APPEAR_AT_CARPOOL &&
            (!paymentAccountNumber || !paymentBankName || !paymentOwnerName))
        }
        isLoading={isLoading}
      />

      <SelectReportTypeModal
        ref={selectTypeRef}
        type="REPORT_DRIVER"
        onSelectedType={setSelectedType}
      />
    </FixedContainer>
  );
};

export default ReportDriverStep2;

const styles = StyleSheet.create({
  containerStyle: {
    paddingHorizontal: PADDING1,
    paddingTop: heightScale1(20),
  },
  submitButtonWrapperStyle: {
    marginHorizontal: PADDING1,
    marginBottom: PADDING1 / 2,
    marginTop: heightScale1(10),
  },
  cancellationReasonWrapper: {
    backgroundColor: colors.policy,
    padding: PADDING1,
    borderRadius: scale1(8),
    marginBottom: heightScale1(20),
    marginTop: heightScale1(10),
  },
  insuranceButtonStyle: {
    marginBottom: heightScale1(20),
  },
  inputStyle: {
    height: heightScale1(110),
    padding: PADDING1,
    borderWidth: 1,
    borderRadius: scale1(8),
    borderColor: colors.disableButton,
    paddingTop: IS_IOS ? PADDING1 : undefined,
    fontSize: fontSize1(15),
    fontFamily: FONT_FAMILY.REGULAR,
    marginTop: heightScale1(10),
  },
  imageWrapper: {
    marginBottom: heightScale1(20),
  },
  addImageButton: {
    width: widthScale1(80),
    height: widthScale1(80),
    borderWidth: 1,
    borderRadius: scale1(8),
    justifyContent: 'center',
    alignItems: 'center',
    borderColor: colors.grayCheckBox,
  },
  imageStyle: {
    width: widthScale1(80),
    height: widthScale1(80),
    borderRadius: scale1(8),
    marginLeft: widthScale1(4),
  },
  closeButton: {
    width: widthScale1(24),
    height: widthScale1(24),
    position: 'absolute',
    backgroundColor: `${colors.heavyGray}70`,
    borderRadius: 999,
    justifyContent: 'center',
    alignItems: 'center',
    right: widthScale1(5),
    top: widthScale1(5),
  },
});
